[{"tags":[],"description":{"full":"<p>nsjs namespacing library for JavaScript</p>\n\n<p>The objective of this library is to create a standard and reusable way to ensure namespace architecture</p>","summary":"<p>nsjs namespacing library for JavaScript</p>\n\n<p>The objective of this library is to create a standard and reusable way to ensure namespace architecture</p>","body":""},"ignore":false,"code":"(function(define){\r\n\tdefine([], function(){\r\n\t\tvar debug = [],\r\n\t\t\tnsjs = {};"},{"tags":[],"description":{"full":"<ul>\n<li>@constructor Namespace\n     * \n     * @param {String} name\n     * @param {Namespace} parent</li>\n</ul>","summary":"<ul>\n<li>@constructor Namespace\n     * \n     * @param {String} name\n     * @param {Namespace} parent</li>\n</ul>","body":""},"ignore":false,"code":"function Namespace(name, parent){\r\n\t\t\tif(!/^[a-z0-9_.]+/.test(name)){\r\n\t\t\t\tthrow new Error('Invalid name provided.' + name);\r\n\t\t\t}\r\n\t\t\tthis.__name = name;\r\n\t\t\tthis.__parent = parent || exports;\r\n\t\t\tthis.__type = 'Namespace';\r\n\t\t\treturn this;\r\n\t\t}","ctx":{"type":"function","name":"Namespace","string":"Namespace()"}},{"tags":[],"description":{"full":"<ul>\n<li>@constructor Module\n     * \n     * @param {String} name\n     * @param {Namespace} parent\n     * @param {String} type\n     * @param {Any} module\n     * \n     * @returns {Module} this</li>\n</ul>","summary":"<ul>\n<li>@constructor Module\n     * \n     * @param {String} name\n     * @param {Namespace} parent\n     * @param {String} type\n     * @param {Any} module\n     * \n     * @returns {Module} this</li>\n</ul>","body":""},"ignore":false,"code":"function Module(name, parent, type, module){\r\n\t\t\tif(!/^[A-Za-z0-9_.]+/.test(name)){\r\n\t\t\t\tthrow new Error('Invalid name provided.' + name);\r\n\t\t\t}\r\n\t\t\tthis.__name = name;\r\n\t\t\tthis.__type = type;\r\n\t\t\tthis.__parent = parent || exports;\r\n\t\t\tthis.ns = ns;\r\n\t\t\tthis.load = load;\r\n\t\t\tthis.lock = lock;\r\n\t\t\treturn this;\r\n\t\t}","ctx":{"type":"function","name":"Module","string":"Module()"}},{"tags":[],"description":{"full":"<ul>\n<li>@function ns\n     * @param name {String}</li>\n</ul>","summary":"<ul>\n<li>@function ns\n     * @param name {String}</li>\n</ul>","body":""},"ignore":false,"code":"function ns(name){\r\n\t\t\tname = (name.indexOf('.') > -1)?name.split('.'):[name];\r\n\t\t\treturn name.reduce(function(namespace, space){\r\n\t\t\t\tif ( namespace[space] === undefined ){\r\n\t\t\t\t\tnamespace[space] = new Namespace(space, namespace);\r\n\t\t\t\t}\r\n\t\t\t\treturn namespace[space];\r\n\t\t\t}, this);\r\n\t\t}","ctx":{"type":"function","name":"ns","string":"ns()"}},{"tags":[],"description":{"full":"<ul>\n<li>Function: load\n     * \n     * when loading a function as a module the context of this will be the parent object, even if that is a function.\n     * watch out for chaining this as the context will become lost if you call this inside the parent function (this);\n     * \n     * example:\n     * \n     *      ns('test');\n     *      test.load('fn', function(x){return x;})\n     * \n     * @param name {String}\n     * @param module\n     * @param last {Boolean}</li>\n</ul>","summary":"<ul>\n<li>Function: load\n     * \n     * when loading a function as a module the context of this will be the parent object, even if that is a function.\n     * watch out for chaining this as the context will become lost if you call this inside the parent function (this);\n     * \n     * example:\n     * \n     *      ns('test');\n     *      test.load('fn', function(x){return x;})\n     * \n     * @param name {String}\n     * @param module\n     * @param last {Boolean}</li>\n</ul>","body":""},"ignore":false,"code":"function load(name, module, immutable){\r\n\t\t\tvar type = detectType(module),\r\n\t\t\t\tget,\r\n\t\t\t\tset,\r\n\t\t\t\tcontext;\r\n\t\t\tif(this[name] !== undefined){\r\n\t\t\t\tthrow new Error('Module already defined.');\r\n\t\t\t}","ctx":{"type":"function","name":"load","string":"load()"}},{"tags":[],"description":{"full":"<ul>\n<li>Function : defaultset\n         * \n         * @class load\n         * @param value</li>\n</ul>","summary":"<ul>\n<li>Function : defaultset\n         * \n         * @class load\n         * @param value</li>\n</ul>","body":""},"ignore":false,"code":"function defaultset(value){\r\n\t\t\t\tmodule = value;\r\n\t\t\t}","ctx":{"type":"function","name":"defaultset","string":"defaultset()"}},{"tags":[],"description":{"full":"<ul>\n<li>Function: defaultget\n         * \n         * @class load\n         * @returns</li>\n</ul>","summary":"<ul>\n<li>Function: defaultget\n         * \n         * @class load\n         * @returns</li>\n</ul>","body":""},"ignore":false,"code":"function defaultget(){\r\n\t\t\t\tvar slice = Array.prototype.slice,\r\n\t\t\t\t\tres;\r\n\t\t\t\tif(!immutable){\r\n\t\t\t\t\tif(arguments.length === 1){\r\n\t\t\t\t\t\tset(arguments[0]);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tres = (typeof module === 'object')?\r\n\t\t\t\t\t\t(module instanceof Array)?\r\n\t\t\t\t\t\t\t\tslice.call(module, 0): // copy the array\r\n\t\t\t\t\t\t\t\t\tObject.clone(module): // copy the object\r\n\t\t\t\t\t\t\t\t\t\tmodule; // return the primitive\r\n\t\t\t\tif(typeof get === 'function'){\r\n\t\t\t\t\treturn get(res);\r\n\t\t\t\t}\r\n\t\t\t\treturn res;\r\n\t\t\t}","ctx":{"type":"function","name":"defaultget","string":"defaultget()"}},{"tags":[],"description":{"full":"<ul>\n<li>Function: changeSetter\n         * \n         * @class load\n         * @param {Function} fn</li>\n</ul>","summary":"<ul>\n<li>Function: changeSetter\n         * \n         * @class load\n         * @param {Function} fn</li>\n</ul>","body":""},"ignore":false,"code":"function changeSetter(fn){\r\n\t\t\t\tif(typeof fn === 'function'){\r\n\t\t\t\t\tset = function(value){\r\n\t\t\t\t\t\tvar res = fn(value);\r\n\t\t\t\t\t\tdefaultset(res);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}","ctx":{"type":"function","name":"changeSetter","string":"changeSetter()"}},{"tags":[],"description":{"full":"<ul>\n<li>Function: changeGetter\n         * \n         * @class load\n         * @param {Function} fn</li>\n</ul>","summary":"<ul>\n<li>Function: changeGetter\n         * \n         * @class load\n         * @param {Function} fn</li>\n</ul>","body":""},"ignore":false,"code":"function changeGetter(fn){\r\n\t\t\t\tif(typeof fn === 'function'){\r\n\t\t\t\t\tget = fn;\r\n\t\t\t\t}\r\n\t\t\t}","ctx":{"type":"function","name":"changeGetter","string":"changeGetter()"}},{"tags":[],"description":{"full":"<ul>\n<li>finish the load declaration</li>\n</ul>","summary":"<ul>\n<li>finish the load declaration</li>\n</ul>","body":""},"ignore":false,"code":"set = defaultset;\r\n\t\t\tdefaultget.changeGetter = changeGetter;\r\n\t\t\tdefaultget.changeSetter = changeSetter;\r\n\t\t\r\n\t\t\tif(type === 'Property'){\r\n\t\t\t\tModule.prototype = Object.create(defaultget);\r\n\t\t\t\tthis[name] = Module.call(defaultget, name, this, type, defaultget);\r\n\t\t\t}else{\r\n\t\t\t\tModule.prototype = Object.create(module);\r\n\t\t\t\tthis[name] = (typeof module !== 'function')?new Module(name, this, type, module):Module.call(module, name, this, type, module);\r\n\t\t\t}\r\n\t\t\tcontext = this[name];\r\n\t\t\treturn this[name];\r\n\t\t}"},{"tags":[],"description":{"full":"<ul>\n<li>@function lock</li>\n</ul>","summary":"<ul>\n<li>@function lock</li>\n</ul>","body":""},"ignore":false,"code":"function lock(){\r\n\t\t\tthis.ns = function(){};\r\n\t\t\tthis.load = function(){};\r\n\t\t\tthis.lock = function(){};\r\n\t\t}","ctx":{"type":"function","name":"lock","string":"lock()"}},{"tags":[],"description":{"full":"<ul>\n<li>@function detectType\n     * @param module\n     * @returns type {String}</li>\n</ul>","summary":"<ul>\n<li>@function detectType\n     * @param module\n     * @returns type {String}</li>\n</ul>","body":""},"ignore":false,"code":"function detectType(module){\r\n\t\t\tvar type = 'Unknown';\r\n\t\t\tswitch(typeof module){\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'number':\r\n\t\t\tcase 'boolean':\r\n\t\t\t\ttype = 'Property';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'object':\r\n\t\t\t\tif(module instanceof Array){\r\n\t\t\t\t\ttype = 'Collection';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ttype = 'Singleton';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'function':\r\n\t\t\t\tif(module.name && module.name[0] === module.name[0].toUpperCase()){\r\n\t\t\t\t\ttype = 'Constructor';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ttype = 'Method';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\t\t\r\n\t\t\t}\r\n\t\t\treturn type;\r\n\t\t}\r\n\t\tNamespace.prototype = {ns : ns, load : load, lock : lock};\r\n\t\tNamespace.prototype.constructor = Namespace;","ctx":{"type":"function","name":"detectType","string":"detectType()"}},{"tags":[],"description":{"full":"<ul>\n<li>global accessors</li>\n</ul>","summary":"<ul>\n<li>global accessors</li>\n</ul>","body":""},"ignore":false,"code":"nsjs.Namespace = Namespace;\r\n\t\tnsjs.Module = Module;\r\n\t\tnsjs.ns = ns;\r\n\t\tnsjs.load = load;\r\n\t\tnsjs.lock = lock;\r\n\t\treturn nsjs;\r\n\t});\r\n}((typeof define !== 'undefined')?define:(typeof exports !== 'undefined') ? function(deps, factory){\r\n\tmodule.exports = factory();\r\n} : function(deps, factory){\r\n\tthis.ns = factory();\r\n}));","ctx":{"type":"property","receiver":"nsjs","name":"Namespace","value":"Namespace","string":"nsjs.Namespace"}}]